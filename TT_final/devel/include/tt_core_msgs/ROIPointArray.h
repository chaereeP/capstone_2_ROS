// Generated by gencpp from file tt_core_msgs/ROIPointArray.msg
// DO NOT EDIT!


#ifndef TT_CORE_MSGS_MESSAGE_ROIPOINTARRAY_H
#define TT_CORE_MSGS_MESSAGE_ROIPOINTARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/CompressedImage.h>
#include <geometry_msgs/Vector3.h>

namespace tt_core_msgs
{
template <class ContainerAllocator>
struct ROIPointArray_
{
  typedef ROIPointArray_<ContainerAllocator> Type;

  ROIPointArray_()
    : header()
    , id()
    , tag()
    , FrameArray()
    , Vector3DArray()
    , extra()  {
    }
  ROIPointArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , tag(_alloc)
    , FrameArray(_alloc)
    , Vector3DArray(_alloc)
    , extra(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_type;
  _id_type id;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tag_type;
  _tag_type tag;

   typedef std::vector< ::sensor_msgs::CompressedImage_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::other >  _FrameArray_type;
  _FrameArray_type FrameArray;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _Vector3DArray_type;
  _Vector3DArray_type Vector3DArray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _extra_type;
  _extra_type extra;





  typedef boost::shared_ptr< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> const> ConstPtr;

}; // struct ROIPointArray_

typedef ::tt_core_msgs::ROIPointArray_<std::allocator<void> > ROIPointArray;

typedef boost::shared_ptr< ::tt_core_msgs::ROIPointArray > ROIPointArrayPtr;
typedef boost::shared_ptr< ::tt_core_msgs::ROIPointArray const> ROIPointArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tt_core_msgs::ROIPointArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tt_core_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': True}
// {'tt_core_msgs': ['/home/naverlabs/ros/TT_final/src/tt3_common/tt_core_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a90b51aaad299305e57af7d9a114865";
  }

  static const char* value(const ::tt_core_msgs::ROIPointArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a90b51aaad29930ULL;
  static const uint64_t static_value2 = 0x5e57af7d9a114865ULL;
};

template<class ContainerAllocator>
struct DataType< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tt_core_msgs/ROIPointArray";
  }

  static const char* value(const ::tt_core_msgs::ROIPointArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32[] id\n\
int32[] tag\n\
sensor_msgs/CompressedImage[] FrameArray\n\
geometry_msgs/Vector3[] Vector3DArray\n\
float32[] extra\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/CompressedImage\n\
# This message contains a compressed image\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
\n\
string format        # Specifies the format of the data\n\
                     #   Acceptable values:\n\
                     #     jpeg, png\n\
uint8[] data         # Compressed image buffer\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::tt_core_msgs::ROIPointArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.tag);
      stream.next(m.FrameArray);
      stream.next(m.Vector3DArray);
      stream.next(m.extra);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ROIPointArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tt_core_msgs::ROIPointArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tt_core_msgs::ROIPointArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "tag[]" << std::endl;
    for (size_t i = 0; i < v.tag.size(); ++i)
    {
      s << indent << "  tag[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tag[i]);
    }
    s << indent << "FrameArray[]" << std::endl;
    for (size_t i = 0; i < v.FrameArray.size(); ++i)
    {
      s << indent << "  FrameArray[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "    ", v.FrameArray[i]);
    }
    s << indent << "Vector3DArray[]" << std::endl;
    for (size_t i = 0; i < v.Vector3DArray.size(); ++i)
    {
      s << indent << "  Vector3DArray[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.Vector3DArray[i]);
    }
    s << indent << "extra[]" << std::endl;
    for (size_t i = 0; i < v.extra.size(); ++i)
    {
      s << indent << "  extra[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.extra[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TT_CORE_MSGS_MESSAGE_ROIPOINTARRAY_H
